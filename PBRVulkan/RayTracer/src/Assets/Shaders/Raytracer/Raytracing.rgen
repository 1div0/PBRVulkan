#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_NV_ray_tracing : require

#include "../Common/Structs.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureNV TLAS;
layout(binding = 1, rgba32f) uniform image2D AccumulationImage;
layout(binding = 2, rgba8) uniform image2D OutputImage;
layout(binding = 3) readonly uniform UniformBufferObject { Uniform ubo; };

layout(location = 0) rayPayloadNV RayPayload Ray;

void main() 
{
	mat4 projInv = inverse(ubo.proj);
	mat4 viewInv = inverse(ubo.view);

	const vec2 pixel = gl_LaunchIDNV.xy;
	const vec2 uv = (pixel / gl_LaunchSizeNV.xy) * 2.0 - 1.0;

	vec4 origin = viewInv * vec4(0, 0, 0, 1);
	vec4 target = projInv * vec4(uv.x, uv.y, 1, 1);
	vec4 direction = viewInv * vec4(normalize(target.xyz), 0);

	uint  rayFlags = gl_RayFlagsOpaqueNV;
	float tMin     = 0.001;
	float tMax     = 10000.0;

	traceNV(TLAS,         // acceleration structure
          rayFlags,       // rayFlags
          0xFF,           // cullMask
          0,              // sbtRecordOffset
          0,              // sbtRecordStride
          0,              // missIndex
          origin.xyz,     // ray origin
          tMin,           // ray min range
          direction.xyz,  // ray direction
          tMax,           // ray max range
          0               // payload (location = 0)
	);

	imageStore(AccumulationImage, ivec2(gl_LaunchIDNV.xy), vec4(Ray.colorAndDistance.rgb, 0));
    imageStore(OutputImage, ivec2(gl_LaunchIDNV.xy), vec4(Ray.colorAndDistance.rgb, 0));
}
